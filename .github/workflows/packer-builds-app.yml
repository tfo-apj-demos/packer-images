name: Build VMware App Images

on:
  workflow_dispatch:
    inputs:
      singleBuild:
        type: choice
        description: image override
        required: false
        options:
          - all
          - ubuntu_2204_vault
          - ubuntu_2204_postgres
          - ubuntu_2204_docker
          - ubuntu_2204_haproxy
          - ubuntu_2204_tfefdo
          - windows_2022_mssql
          - ubuntu_2204_nomad
          - windows_2022_iis
          - ubuntu_2204_splunk
          - ubuntu_2204_aap
          
  schedule:
   - cron:  '0 11 * * SUN' # UTC TIME

env:
  DEFAULT_IMAGES: ubuntu_2204_vault, ubuntu_2204_postgres, ubuntu_2204_docker, ubuntu_2204_haproxy, ubuntu_2204_tfefdo, windows_2022_mssql, windows_2022_iis, ubuntu_2204_splunk, ubuntu_2204_nomad
  HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
  HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET }}
  HCP_PROJECT_ID: ${{ secrets.HCP_PROJECT_ID }}
  VCENTER_USERNAME: ${{ secrets.VCENTER_USERNAME }}
  VCENTER_PASSWORD: ${{ secrets.VCENTER_PASSWORD }}
  VCENTER_SERVER: ${{ secrets.VCENTER_SERVER }}
  ROLE_CONFIG: ${{ secrets.ROLE_CONFIG }}
  WINDOWS_PASSWORD: ${{secrets.WINDOWS_PASSWORD}}
  LINUX_PASSWORD: ${{secrets.LINUX_PASSWORD}}
  CONTROLLER_HOST: "aap-aap.apps.openshift-01.hashicorp.local"
  CONTROLLER_USERNAME: admin
  CONTROLLER_PASSWORD: ${{ secrets.CONTROLLER_PASSWORD }}
  CONTROLLER_VERIFY_SSL: false
  CONTROLLER_PROJECT: "eda_example"
    
jobs:
  selectimages:
    runs-on: "ubuntu-latest"
    steps:
      - name: get-images
        id: get-images
        run: |
          if [[ "${{ inputs.singleBuild }}" != "all" ]] && [[ -n "${{ github.event.inputs.singleBuild }}" ]]; then
            export IMAGES=$(echo ${{ inputs.singleBuild }} | jq -R '["\(.)"]')
            echo "images_out"=$IMAGES""
            echo "images_out"=$IMAGES"" >> $GITHUB_OUTPUT
          else
            export IMAGES=$(echo $DEFAULT_IMAGES | jq -R 'split(", ")')
            echo "images_out"=$IMAGES""
            echo "images_out"=$IMAGES"" >> $GITHUB_OUTPUT
          fi
    outputs:
      images: ${{ steps.get-images.outputs.images_out }}

  build:
    runs-on: [self-hosted, gcve]
    needs: [selectimages]
    strategy:
      matrix:
        image_type: ${{fromJson(needs.selectimages.outputs.images)}}
    steps:
      - uses: FraBle/clean-after-action@v1
      
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        
      - name: Run Makefile with retries
        shell: bash
        run: |
          export CONTROLLER_HOST="${{ env.CONTROLLER_HOST}}"
          max_attempts=3
          attempt=1
          until make ${{ matrix.image_type }} || [ $attempt -eq $max_attempts ]
          do
            echo "Attempt $attempt failed! Retrying in 30 seconds..."
            attempt=$(( attempt + 1 ))
            sleep 30
          done
          
          if [ $attempt -eq $max_attempts ] && ! make ${{ matrix.image_type }}; then
            echo "All $max_attempts attempts failed"
            exit 1
          fi
